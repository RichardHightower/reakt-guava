{
  "name": "Reakt Guava Bridge",
  "tagline": "Bridge between Reakt and Guava Futures",
  "body": "## Reakt to Guava Bridge\r\n\r\nGuava gets used by many libraries for its async support.\r\nMany NoSQL drivers use Guava, e.g., Cassandra. ***Guava*** is JDK 1.6 backwards compatible. \r\n\r\n[Reakt](http://advantageous.github.io/reakt/) provides composable \r\npromises that support lambda expressions, and a fluent API.\r\n\r\nThis bridge allows you to use ***Reakt's*** promises, reactive streams\r\nand callbacks to have a more modern Java experience with libs like\r\n[Cassandra](http://www.datastax.com/dev/blog/java-driver-async-queries) \r\nand other libs that use [Guava](https://github.com/google/guava).\r\n\r\n#### Cassandra Reakt example\r\n\r\n```java\r\n\r\nregister(session.executeAsync(\"SELECT release_version FROM system.local\"), \r\n  promise().thenExpect(expected -> \r\n     gui.setMessage(\"Cassandra version is \" +\r\n         expected.get().one().getString(\"release_version\"))\r\n  ).catchError(error -> \r\n     gui.setMessage(\"Error while reading Cassandra version: \" \r\n     + error.getMessage())\r\n  )\r\n);\r\n     \r\n```\r\n\r\nYou can also use replay promises, all promises, any promises, and other\r\nfeatures of Reakt to simplify async, reactive Java development.\r\n\r\nReakt gets used by [QBit](http://advantageous.github.io/qbit/), and Conekt.\r\n\r\n\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}